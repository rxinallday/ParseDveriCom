import os
import time
import requests
from playwright.sync_api import sync_playwright
from openpyxl import Workbook
from urllib.parse import urljoin
from PIL import Image
from io import BytesIO

BASE_URL = "https://dveri.com/catalog/dveri-mezhkomnatnyye"
DOWNLOAD_FOLDER = "images"
os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)

EXCLUDED_CATEGORIES = [
    "–ê—Ä–∫–∏ –∏ –ø–æ—Ä—Ç–∞–ª—ã",
    "–ü–ª–∏–Ω—Ç—É—Å",
    "–î–µ–∫–æ –†–µ–π–∫–∞",
    "–§—É—Ä–Ω–∏—Ç—É—Ä–∞ –∏ –ø—Ä–æ—á–µ–µ",
    "–ú–æ–Ω—Ç–∞–∂ –∏ —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏—è",
    "–í –ø–æ–º–æ—â—å –ø—Ä–æ–¥–∞–≤—Ü–∞–º"
]


def download_and_convert_image(url, name):
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            image = Image.open(BytesIO(response.content)).convert("RGB")
            file_path = os.path.join(DOWNLOAD_FOLDER, name + ".webp")
            image.save(file_path, "webp")
            return file_path
        else:
            print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {url} (–∫–æ–¥ {response.status_code})")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    return ""


def parse_price(price_text):
    """–û—á–∏—Å—Ç–∫–∞ —Ü–µ–Ω—ã –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–Ω–∞–∫–∞ —Ä—É–±–ª—è, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 50%."""
    price = price_text.replace(" ", "").replace("‚ÇΩ", "").strip()
    try:
        price = float(price)
        price_with_discount = price * 1.5  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 50%
        return round(price_with_discount, 2)
    except ValueError:
        return None


def run_parser():
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...")
    wb = Workbook()
    ws = wb.active
    ws.title = "–¢–æ–≤–∞—Ä—ã"
    ws.append(["–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–¶–≤–µ—Ç", "–¶–µ–Ω–∞", "–°—Å—ã–ª–∫–∞", "–ö–∞—Ä—Ç–∏–Ω–∫–∞ (.webp)"])

    with sync_playwright() as p:
        browser = p.chromium.launch(headless=False)
        page = browser.new_page()
        page.goto("https://dveri.com/")

        # –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        print("‚è≥ –û–∂–∏–¥–∞–µ–º 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")
        time.sleep(10)

        page.wait_for_timeout(3000)

        print("üì• –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
        category_links = page.query_selector_all("ul.sidebar__list a")
        categories = []
        for item in category_links:
            href = item.get_attribute("href")
            name = item.inner_text().strip()
            if href and name and "/catalog/" in href and name.lower() not in [excl.lower() for excl in
                                                                              EXCLUDED_CATEGORIES]:
                categories.append((name, urljoin(BASE_URL, href)))

        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")

        for category_name, category_url in categories:
            print(f"\nüìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category_name}")
            page.goto(category_url)
            page.wait_for_timeout(3000)
            page.wait_for_load_state("domcontentloaded")

            while True:
                product_cards = page.query_selector_all(".card")

                if not product_cards:
                    print("‚ö†Ô∏è –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
                    break

                print(f"üîÑ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(product_cards)}")
                for idx, card in enumerate(product_cards):
                    try:
                        title = card.query_selector(".card__title")
                        title = title.inner_text().strip() if title else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

                        color = card.query_selector(".card__color")
                        color = color.inner_text().strip() if color else "–ù–µ —É–∫–∞–∑–∞–Ω"

                        price = card.query_selector(".card__price")
                        price = price.inner_text().strip() if price else "-"

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–∫–∏ "–Ω–∞ –∑–∞–∫–∞–∑" –∏–ª–∏ "sale"
                        badge = card.query_selector(".badge--card")
                        if badge:
                            badge_text = badge.inner_text().strip().lower()
                            if "–Ω–∞ –∑–∞–∫–∞–∑" in badge_text or "sale" in badge_text:
                                print(f"  üî¥ {title} ‚Äî –ü–æ–º–µ—á–µ–Ω –∫–∞–∫ '–ù–∞ –∑–∞–∫–∞–∑' –∏–ª–∏ 'Sale'")
                                card.set_style("background-color: black; color: white;")  # –ø–æ–º–µ—á–∞–µ–º —á—ë—Ä–Ω—ã–º

                        # –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É
                        parsed_price = parse_price(price)

                        href = card.query_selector("a")
                        href = href.get_attribute("href") if href else ""
                        full_link = urljoin(BASE_URL, href)

                        img_tag = card.query_selector(".card__img-wrapper img")
                        img_src = img_tag.get_attribute("src") if img_tag else None
                        full_img_url = urljoin(BASE_URL, img_src) if img_src else ""

                        safe_name = title.replace(" ", "_").replace("/", "_").replace("\\", "_")[:50]
                        img_path = download_and_convert_image(full_img_url, safe_name) if full_img_url else ""

                        ws.append([category_name, title, color, parsed_price, full_link, img_path])
                        print(f"  ‚úÖ [{idx + 1}] {title} ‚Äî {color} ‚Äî {parsed_price}")
                    except Exception as e:
                        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ: {e}")

                next_btn = page.query_selector(".pagination__arrow--right:not(.disabled)")
                if next_btn:
                    print("‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
                    next_btn.click()
                    page.wait_for_timeout(3000)
                else:
                    print("‚õî –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.")
                    break

        browser.close()
    wb.save("dveri_products.xlsx")
    print("\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –§–∞–π–ª: dveri_products.xlsx")


if __name__ == "__main__":
    run_parser()
